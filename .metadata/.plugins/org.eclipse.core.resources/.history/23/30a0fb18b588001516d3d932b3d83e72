from abc import abstractmethod
from world.world import World
from timeit import itertools


'''
Summary of classes and types used:

define info = (integrator, world). The info is important
to provide base information to the generator. Optimally, 
info is the last parameters passed to a completed generator
in order to generate contexts.

Generator: (integrator, world) -> context iterator
The parameters are passed through the __init__ method 

CompositionalGenerator: (world -> \tau iterator, Generator) -> Generator
The first parameter is an enumerator, which defines all objects of type
\tau that are defined by the current world. The second parameter is a 
delegate generator, which converts objects of type \tau to a context.

AggregationGenerator: (Generator list) -> Generator
This aggregates a series of Generators into a single one.

Let gen = world -> \tau iterator, and mod = \tau iterator -> \gamma iterator

Note that gen' = mod o gen is a valid enumerator. Thus, we can place additional
restrictions to the gen function by composition.
'''

class Generator(object):
    '''
    A generator is a class that accepts a world 
    then produces a series of event contexts in the 
    form of an iterable. This iterable is accessable
    through the __iter__ method and must be implemented
    '''
    def __init__(self, integrator, world):
        if not isinstance(world, World):
            raise TypeError("World \"{}\" passed as parameter to Generator is not of instance of class World".format(world))
        self.integrator = integrator
        self.world = world
        
    @abstractmethod
    def __iter__(self):
        '''
        Generates a series of contexts that describes the space of 
        events that is being described by this generator.
        
        @return: a finite-sized iterator where each element is 
        instance of Context. 
        
        @see: event.context.Context
        '''
        return
    
''' *** Compositional Generators *** '''
    
'''
Compositional generators are generators that provide the functionality
of splitting up the world into some set X such that \forall x \in X. 
x \subseteq world. This generator is composed with a different generator
that transforms x \in X to some context.
'''

class AggregateGenerator(Generator):
    '''
    Aggregator generator class.
    
    Example Usage : 
    
    agg = AggregateGenerator([ParticleMeshCollision, MeshMeshCollision])
    contextIterable = agg (integrator, world)
    '''
    def __init__(self, generators):
        '''
        Is a generator that aggregates many other generators
        @param world: the world used for this aggregate generator
        @param generators: a list of generators that we use to produce
        all events in this world.
        '''
#         super(self, Generator).__init__(world)
        
        # create a generator with the current world as the parameter.
#         self.generators = generators.map(lambda g : g(world))
    
    def __iter__(self):
        # simply chain together all of the generators
        return itertools.chain.from_iterable(self.generators)

class CompositionalGenerator:
    '''
    CompositionalGenerator : (world -> tau iterator, tau -> context) -> (integrator, world) -> context iterator
    
    Example usage for particle to mesh collisions
    
    let particleMeshEnumerator : enumerationFn
    and particleMeshCollision  : contextFn
    
    then 
    
    generator = CompositionalGenerator(particleMeshEnumerator, particleMeshCollision) (integrator, world)
     
    Note that this fits nicely into the AggregateGenerator using the following pattern
    
    agg = AggregateGenerator(
       CompositionalGenerator(particleMeshEnumerator, particleMeshCollision),
       CompositionalGenerator(particleMeshEnumerator, particleBoundaryCrossing))
    
    # then, we can use this with
    for context in agg (integrator, world):
        ...
    '''
    def __init__(self, enumerationFn, contextFn):
        self.enumerationFn = enumerationFn
        self.contextFn = contextFn
    
    def __call__(self, integrator, world):
        g = Generator(integrator, world)
        def it():
            values = self.enumerationFn(world)
            for v in values:
                yield self.contextFn(integrator, v)
                
        g.__iter__ = it
        return g
 
class ParticleFaceGenerator(Generator):
    '''
    A particle-face generator. Generates the set X such that
    
    X = \{x | x \in particles(world)\} \times \{x | x \in faces(world)\}
    
    Example: use the particle face generator to enumerate all possible collisions
    between particles and faces.
    '''
    def __init__(self, world, conversionFn):
        '''
        @param world: the world that we will use to generate subsets of this world
        @param conversionFn: a function that converts our world subsets to event contexts
        '''
        super(Generator, self).__init__(world)
        self.conversionFn = conversionFn
    
    def accept(self, particle, face):
        '''
        Allow a client to override the accept method, in case 
        they want to filter out particular particle/faces
        '''
        return True
    
    class _Iterable:
        '''
        Why is making a valid iterator so painful in python?
        '''
        
        def __init__(self, outer):
            self.outer = outer
            
        def next(self):
            
            return
        
    @abstractmethod
    def __iter__(self):
        return self._Iterable(self)        
    