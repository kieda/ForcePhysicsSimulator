from abc import abstractmethod
import numpy
from test.test_decorators import memoize
class Edge(object):
    '''
    represents an abstract connection between two boundaries.
    '''

    def __init__(self, dim):
        '''
        @param dim: the dimension of this edge 
        '''
        
        self.dim = dim
        
    @abstractmethod
    def isConsistent(self):
        '''
        Since an edge is a connection between two boundaries, the 
        two boundaries that form this edge can either be consistent
        or inconsistent in their normals that they form with respect
        to each other.
        
        Returns True iff the two boundaries are consistent with each 
        other.
        
        Note that consistency is maintained externally at the Mesh
        level by changing the sign of the resulting normal.
        
        (this makes sense since more advanced normals may average 
        against several meshes)
        '''
        return
    
    @abstractmethod
    def getConnection(self):
        '''
        Returns the vertices or information that makes up the connection
        of the edge.
        '''
        return 
    
    
class Edge2D(Edge):
    '''
    represents a connection between two 2-dimensional boundaries
    '''
    def __init__(self, boundary1, boundary2, a, b):
        '''
        @param boundary1: the first boundary that forms this edge
        @param boundary2: the second boundary that forms this edge
        @param a: which vertex are we using in boundary1
        @param b: which vertex are we using in boundary2
        
        For a and b, there is a correlation between their values and
        the edge formed.
        
        value  | Description
        -------|----------------------
        0      | boundary.point1()
        1      | boundary.point2()
        '''
        super(Edge, self).__init__(2)
        self.boundary1 = boundary1
        self.boundary2 = boundary2
        self.a = a
        self.b = b
        
        if a 
        
        if boundary1.toArray()[a] != boundary2.toArray()[b]:
            raise ValueError("Boundary defined by " + boundary1 + "[" + a + "]" + ", " + boundary2 + "[" + b + "] is not connected!")
        
    @memoize
    def getConnection(self):
        return self.boundary1.toArray()[self.a]
    
    def isConsistent(self):
        return 
    
class Edge3D(Edge):
    '''
    represents a connection between two 3-dimensional boundaries
    
    @param boundary1: the first boundary that forms this edge
    @param boundary2: the second boundary that forms this edge
    @param a, b: which vertices are we using in boundary1
    @param c, d: which vertices are we using in boundary2
    For a, b, c, d there is a correlation between their values and
        the edge formed.
        
        value  | Description
        -------|----------------------
        0      | boundary.point1()
        1      | boundary.point2()
        2      | boundary.point3()
    '''
    def __init__(self, boundary1, boundary2, a, b, c, d):
        super(Edge, self).__init__(3)
        self.boundary1 = boundary1
        self.boundary2 = boundary2
        
        if boundary1.toArray()[a] != boundary2.toArray()[c] or \
            boundary1.toArray()[b] != boundary2.toArray()[d] : 
            raise ValueError("Boundary defined by " + boundary1 + "[" + a +  ", " + b +"]" + \
                     ", " + boundary2 + "[" + c + ", " + d + "] is not connected!")

    @memoize
    def getConnection(self):
        return numpy.array([self.boundary1.toArray()[self.a], self.boundary1.toArray()[self.b]])