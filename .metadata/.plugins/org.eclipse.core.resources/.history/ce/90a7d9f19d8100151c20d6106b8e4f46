from test.test_decorators import memoize
from world.staticObject import StaticObject
import numpy


class Face(StaticObject):
    '''
    A face represents a series of boundaries that
    are parallel to one another.
    
    When the user specifies a series of triangles that
    form a polygon in three-space, it's useful to treat it like a
    single object, so we don't emit an excessive number of boundary crossing
    events as a particle moves across the polygon's surface.
    '''
    def __init__(self, dim, boundaries):
        #initial position is just (0, 0, 0) in its own local space.
        #we transform this as we go in the face's local space, then
        #translate wrt the mesh's world position.
        super(StaticObject, self).__init__(dim, numpy.zeros(dim))
        
    def _checkBoundaries(self):
        '''
        Checks that all boundaries inside of this face are indeed parallel.
        '''
        return True
    
    @memoize
    def getBoundary(self):
        '''
        returns an array of all of the boundaries that are on the outside of this
        face. This is nice if we want to find all of the faces adjacent to this one
        '''
        
class Mesh(object):
    '''
    Represents a mesh. Defined by a non-empty sequence of boundaries
    in two or three dimensions.
    
    We disallow disconnected meshes.
    '''
    def __init__(self, dim, boundaries):
        '''
        @param boundaries: the boundaries that are on this mesh.
        '''
        self.boundaries = boundaries # boundaries are paired with their respective faces
        self.neighborMap = self._buildNeighborMap() # map of boundary -> neighbor
        self.faces = None # calculated faces
         
        
    
    def _buildNeighborMap(self):
        '''
        Here we build the map of neighbors for each face.
        currently unimplemented, so we have two options
        
        1. Use a naive O(n^2) algorithm where we check each 
        boundary against each other (maybe a bad idea)
        2. Use a set to determine vertices that are relatively
        close, then we just grab all of the objects inside of the
        same bucket and check neighbors there (probably better, can eliminate
        many checks). Can cut cost from n choose 2 to n in the 2d case.
        '''
        return
    
    def _isConnected(self):
        '''
        Tests the connectivity of this mesh. We might have a mesh
        where all of the edges have neighbors, but is disconnected.
        
        We disallow this case
        '''
        return True
    
    @memoize
    def isClosed(self):
        '''
        @return: if this mesh is a closed surface.
        '''
        
        return True
    
    @memoize
    def volume(self):
        if not self.isClosed():
            raise RuntimeError("Cannot find the volume on a non-closed mesh")

    def getFaces(self):
        return self.faces
    
# we provide these methods in case the user wants to 
# have a consitency of material. 
# A typical use case involves having an object that the user 
# wants a certain mass, then for material consistency has every
# object of the same mass 

def calculateMass(density, mesh):
    '''
    Calculate the mass of a mesh given its density
    '''
    return mesh.volume() * density
    
def calculateDensity(mass, mesh):
    '''
    Calculate the density of a mesh given its mass
    '''
    return mass / mesh.volume()