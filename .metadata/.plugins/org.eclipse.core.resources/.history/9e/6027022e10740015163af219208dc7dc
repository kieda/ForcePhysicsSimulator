package edu.cmu.cs.graphics.crowdsim.ai.module;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

import com.google.common.collect.LinkedListMultimap;
import com.google.common.collect.Multimap;

/**
 * data structure for handling all of the module listeners and processing them.
 * 
 * Version 1.0: process and find applicable modules in a naive manner by searching 
 * through the entire tree for applicable modules.
 * Version 2.0: (todo) speed improvement by quickly being able to query modules in the tree that are of a single type.
 * 
 * Semantics: listeners will only accept modules that are in its own linking unit, 
 * or the direct children of the initial linking unit.
 * 
 * @author zkieda
 */
public class ModuleListenerProcessor {
	//class listeners that we're watching for.
	private final Multimap<Class<?>, ModuleListener<?>> listeners = LinkedListMultimap.create(0); 
	
	public ModuleListenerProcessor(){
		
	}
	
	/**
	 * This is called when a ModuleListener is added where there is no @ListenOn annotation present 
	 */	
	protected void onNoAnnotationPresent(ModuleListener<?> val) {
		
	}
	
	/**
	 * represents the exception that was thrown when we attempted to invoke the method.
	 * 
	 * 
	 */
	protected void onAnnotationMismatch(ClassCastException exception) {
		throw exception;
	}
	
	/**
	 * Given a class that has been added to the module tree, we will detect if it is applicable to 
	 * any 
	 * @param moduleClass
	 * @return
	 */
	private Iterable<ModuleListener<?>> getListeners(final Class<?> moduleClass){
		final Iterator<ModuleListener<?>> it = listeners.values().iterator();
		return () -> new Iterator<ModuleListener<?>>(){
			//1. get next
			private void getNext(){
				//find currentStream if possible
				
				while(it.hasNext()){
					ModuleListener<?> val = it.next();
					ListenOn target = val.getClass().getAnnotation(ListenOn.class);
				
					//if the module is an instanceof the target class...
					if(target.value().isAssignableFrom(moduleClass)){
						next = val;
						return;
					}
				}
					
				hasNext = false;
			}
			
			private boolean hasNext = true;
			private ModuleListener<?> next;
			
			{
				//kick off iteration.
				getNext();
			}
			
			@Override
			public boolean hasNext() {
				return hasNext;
			}
			
			@Override
			public ModuleListener<?> next() {
				if(hasNext) {
					try{
						return next;
					} finally{
						getNext();
					}
				}
				throw new NoSuchElementException();
			}
		};
	}
}
