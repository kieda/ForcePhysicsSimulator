'''
@author: zkieda
'''
from world.staticObject import StaticObject
import numpy

class Face(StaticObject):
    '''
    A face represents a series of boundaries that
    are parallel to one another.
    
    When the user specifies a series of triangles that
    form a polygon in three-space, it's useful to treat it like a
    single object, so we don't emit an excessive number of boundary crossing
    events as a particle moves across the polygon's surface.
    '''
    def __init__(self, dim, boundaries, boundaryMap):
        '''
        Instantiate a face.
        @param dim: the number of dimensions this face is in
        @param boundaries: the boundaries that make up this face
        @param boundaryMap: map of type (Boundary -> (Boundary, BoundaryConnection) list)
        @requires: boundaries \subseteq domain(boundaryMap)
        @requires: \forall u, v \in boundaries x boundaries. u.parallel v
        @requires: \forall b \in boundaries b.dim == dim. 
        @requires: \forall (u, L) \in boundaryMap. \forall (v, e) \in L. u.dim == dim, v.dim = dim, e.dim = dim, v is neighbor to u by edge e.   
        '''
        #initial position is just (0, 0, 0) in its own local space.
        #we transform this as we go in the face's local space, then
        #translate wrt the mesh's world position.
        super(StaticObject, self).__init__(dim, numpy.zeros(dim))
        self.boundaries = boundaries
        self.boundaryMap = boundaryMap
        
        if not self._checkBoundaries():
            raise ValueError("All boundaries specified are not parallel in this face " + boundaries)
    
    def _checkBoundaryMap(self):
        '''
        validate the boundary map
        '''
        for boundary in self.boundaries:
            if boundary not in self.boundaryMap:
                return False
        return True
    
    def _checkBoundaries(self):
        '''
        Checks that all boundaries inside of this face are indeed parallel.
        '''
        
        if len(self.boundaries) == 0 :
            return True
        ''' 
        Use this method since parallelism is transitive and symmetric 
        '''
        b0 = self.boundaries[0]
        for bi in self.boundaries[1:]:
            if not b0.isParallel(bi):
                return False
        
        return True
    
    @memoize
    def getExterior(self):
        '''
        returns an array of all of the boundaries that are on the outside of this
        face. This is nice if we want to find all of the faces adjacent to this one
        '''
        initial = self.boundaries[0]        